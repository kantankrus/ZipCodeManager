@model IEnumerable<ZipCodeManager.Models.Zip>

@{
    ViewBag.Title = "Postal Code Manager";
}

<h2>Manage Postal Codes:</h2>

<p>@*
    @Html.ActionLink("Create New", "Create")
   *@
</p>
<div>
    <table>
        <thead>
            <tr>
                <td>
                        Search ZIP:
                </td>
                <td>
                        Search State:
                </td>
            </tr>
        </thead>
        <tr>
            <td>
                <input id="txtZip" size="10" />
            </td>
        <td>
             @Html.DropDownList("stateList", String.Empty)
            </td></tr>
    </table>
    <br />
</div>

<table id="mainGrid" class="dt">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ZIP1)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.State)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.County)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Lat)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Long)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.ZIP1)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.City)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.State)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.County)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Lat)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Long)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.id })
        </td>
    </tr>
}
    </tbody>
</table><br /><br />
@*
Render partial view and pass it the proper model. 
*@
@Html.Partial("~/Views/Zip/_Create.cshtml", new ZipCodeManager.Models.Zip())

@section Scripts {

    <script type="text/javascript">
        /*
        *Client side filtering/sorting - for smaller data sets this works well. Larger data sets I would use server side sorting/filtering.
        *
        * Initialize variables for the user selected State & Zip on DOM load
        * Generally I wouldn't have all this code included in the view, I would make a script and
        * include it in the BundleConfig but I want to make it visible.
        */
        var statePicked = '';
        var zipPicked = '';

        $.fn.dataTable.ext.search.push(
        function (settings, data, dataIndex) {
            if (data[2].indexOf(statePicked) > -1) {
                return true;
            } else {
                return false;
            }
        },
        function (settings, data, dataIndex) {
            if (data[0].indexOf(zipPicked) > -1) {
                return true;
            }
        }
    );

        $(document).ready(function () {

            var table = $('#mainGrid').DataTable({
                "paging": true,
                "ordering":false,
                "searching":true
            });
            //Jquery detect drop down change for state -> redraw table
            $('#stateList').change(function (event) {
                statePicked = $('#stateList').val();
                table.draw();
            });
            //Any change in text field updates the zipPicked variable -> redraw table
            $('#txtZip').keyup(function (event) {
                zipPicked = $('#txtZip').val();
                table.draw();
            });
        });
     </script>
}